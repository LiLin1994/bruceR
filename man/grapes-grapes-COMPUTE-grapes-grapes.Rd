% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bruceR_multivariate.R
\name{\%\%COMPUTE\%\%}
\alias{\%\%COMPUTE\%\%}
\alias{COUNT}
\alias{SUM}
\alias{MEAN}
\alias{STD}
\alias{CONSEC}
\title{Compute multiple variables in an elegant manner}
\usage{
COUNT(data, var = NULL, items = NULL, vars = NULL, varrange = NULL,
  value = NA)

SUM(data, var = NULL, items = NULL, vars = NULL, varrange = NULL,
  rev = NULL, likert = NULL, na.rm = TRUE)

MEAN(data, var = NULL, items = NULL, vars = NULL, varrange = NULL,
  rev = NULL, likert = NULL, na.rm = TRUE)

STD(data, var = NULL, items = NULL, vars = NULL, varrange = NULL,
  rev = NULL, likert = NULL, na.rm = TRUE)

CONSEC(data, var = NULL, items = NULL, vars = NULL,
  varrange = NULL, values = 0:9)
}
\arguments{
\item{data}{a \code{data.frame} or \code{data.table}.}

\item{var}{[optional 1] the common part across a series of variables (e.g., \code{"RSES"}, the Rosenberg Self-Esteem Scale).}

\item{items}{[optional 1] the unique part across a series of variables (e.g., \code{1:10}).}

\item{vars}{[optional 2] a character vector specifying the variable list (e.g., \code{c("x1", "x2", "x3")}).}

\item{varrange}{[optional 3] a character specifying the range of variables with the same order as in the data (e.g., \code{"Age:Edu"}).}
}
\description{
Compute multiple variables in an elegant manner
}
\section{Functions}{
\itemize{
\item \code{COUNT}: \strong{Count} a certain value across multiple variables

\item \code{SUM}: Compute \strong{sum} across multiple variables

\item \code{MEAN}: Compute \strong{mean} across multiple variables

\item \code{STD}: Compute \strong{standard deviation} across multiple variables

\item \code{CONSEC}: Compute \strong{consecutive identical digits} across multiple variables (especially useful in detecting careless responding)
}}

\examples{
## From now on, please use 'data.table' instead of 'data.frame'.
## Believe me.

## Run the examples:
## example("MEAN")

d=data.table(x1=1:5,
             x4=c(2,2,5,4,5),
             x3=c(3,2,NA,NA,5),
             x2=c(4,4,NA,2,5),
             x5=c(5,4,1,4,5))
d
# I deliberately set this order to
# show you the difference between "vars" and "varrange".

d[,":="(na=COUNT(d, "x", 1:5, value=NA),
        n.2=COUNT(d, "x", 1:5, value=2),
        sum=SUM(d, "x", 1:5),
        m1=MEAN(d, "x", 1:5),
        m2=MEAN(d, vars=c("x1", "x4")),
        m3=MEAN(d, varrange="x1:x2", rev="x2", likert=1:5),
        cons1=CONSEC(d, "x", 1:5),
        cons2=CONSEC(d, varrange="x1:x5")
        )]
d  # It has been already changed.

## NOTE: ":=" is indeed a special function in the 'data.table' package.
## See a similar function "mutate()" in the 'dplyr' package: ?dplyr::mutate
## For data.table, you need NOT to re-assign the tranformed data object,
## because it can automatically update the variables in situ!
}
